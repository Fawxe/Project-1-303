using namespace std;
#include <iostream>;
#include <string>;
#include "Menu.h";
#include "Term.h";
#include "list.h";  //list from class



void insert_Term(list<Term>& polynomial, Term *term)
{
	list<Term>::iterator itr = polynomial.begin();
	bool addedToList = false;
	for (itr; itr != polynomial.end(); *itr++)
	{
		if (*itr == *term)
		{
			*itr = *itr + *term;
			addedToList = true;
			break;
		}
		else if (*itr < *term)
		{
			polynomial.insert(itr, *term);
			addedToList = true;
			break;
		}
	}
	if (!addedToList)
	{
		polynomial.push_back(*term);
	}
}

void Convert_Input(string input, list<Term>& polynomial) //takes string input and converts to list of Term outputs
{
	int tempCoeffient = 1;
	int tempExponent = 0;
	bool firstCoeffientDigit = true;
	bool co_eff = true;
	bool has_x = false;
	Term new_term;
	bool is_negative = false;
	for (int i = 0; i <= input.size() - 1; i++)
	{

		if (input[i] == '+' || input[i] == '-')
		{

			if (is_negative)
			{
				int sign_change = new_term.get_coefficient();
				sign_change = sign_change*-1;
				new_term.set_coefficient(sign_change);
				is_negative = false;
			}
			if (input[i] == '-')
			{
				tempCoeffient = -1;
				is_negative = true;
			}
			else
			{
				tempCoeffient = 1;
			}

			int term_test = new_term.get_coefficient();
			if (term_test != 0)
			{
				insert_Term(polynomial, &new_term);
			}
			firstCoeffientDigit = true;
			tempExponent = 0;
			co_eff = true;
			has_x = false;
			new_term.set_coefficient(tempCoeffient);
			new_term.set_exponent(0);
		}

		else if (input[i] == 'x' || input[i] == 'X')
		{
			tempExponent = 0;
			co_eff = false;
			has_x = true;
			new_term.set_exponent(1);
			if (new_term.get_coefficient() == 0)
				new_term.set_coefficient(1);
		}

		else if (co_eff == true)
		{
			if (firstCoeffientDigit) // is this the first digit of the coeffidient
			{
				tempCoeffient = (input[i] - 48); // - 48 or -"0" convert the ASCII to binary
				if (is_negative)
					tempCoeffient = tempCoeffient*-1;
				firstCoeffientDigit = false;
			}
			else
			{
				tempCoeffient = tempCoeffient * 10 + input[i] - 48;
			}
			new_term.set_coefficient(tempCoeffient);
		}

		else if (input[i] == '^')
		{
			if (i < input.size() - 3) // otherwise the following will cause an out of bounds exception.
			{
				if (input[i + 1] == '-')
					new_term.set_exponent(-input[i + 2] + 48);
			}
		}

		else if (co_eff == false)
		{
			if (tempExponent != 0)
				tempExponent = tempExponent * 10 + input[i] - 48;
			else
				tempExponent = input[i] - 48;
			new_term.set_exponent(tempExponent);
		}
		else
			break;
	}
	insert_Term(polynomial, &new_term);
}




list<Term>Clear_list(list<Term>& polynomial) //intended to clear first list upon user choice
{
	if (polynomial.size() == 0)
		return polynomial;
	while (polynomial.size()>0)
		polynomial.pop_back();
	return polynomial;
}

int main()
{
	bool done = false;
	string firstPolynomial = "";
	string secondPolynomial = "";
	list<Term> polynomial;
	while (!done)
	{
		string choice = Get_Choice(firstPolynomial, secondPolynomial);
		if (choice == "1")
		{
			Clear_list(polynomial);
			firstPolynomial = Get_Input();
		}
		else if (choice == "2") {
			secondPolynomial = Get_Input();
		}
		else if (choice == "3") {
			Convert_Input(firstPolynomial, polynomial);
			Convert_Input(secondPolynomial, polynomial);
			Display_polynomial(polynomial, firstPolynomial, secondPolynomial);
			Clear_list(polynomial);
		}
		else if (choice == "4") {
			Convert_Input(firstPolynomial, polynomial);
			Convert_Input(secondPolynomial, polynomial);
			firstPolynomial = Display_polynomial(polynomial, firstPolynomial, secondPolynomial);
			Clear_list(polynomial);
		}
		else if (choice == "0")
		{
			done = true;
			break;
		}
	}
}
