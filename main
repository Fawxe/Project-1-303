void Convert_Input(string input, list<Term>& polynomial)
{
	int temp = 1;
	bool co_eff = true;
	bool has_x = false;
	Term new_term;
	bool is_negative = false;
	for (int i = 0; i <= input.size() - 1; i++)
	{

		if (input[i] == '+' || input[i] == '-')
		{

			if (is_negative)
			{
				int sign_change = new_term.get_coefficient();
				sign_change = sign_change*-1;
				new_term.set_coefficient(sign_change);
				is_negative = false;
			}
			if (input[i] == '-')
				is_negative = true;
			int term_test = new_term.get_coefficient();
			if (term_test != 0)
			{
				polynomial.push_back(new_term);
			}
			temp = 1;
			co_eff = true;
			has_x = false;
			new_term.set_coefficient(0);
			new_term.set_exponent(0);

		}

		else if (input[i] == 'x' || input[i] == 'X')
		{
			temp = 0;
			co_eff = false;
			has_x = true;
			new_term.set_exponent(1);
		}

		else if (co_eff == true)
		{
			if (temp != 1)
				temp = temp * 10 + input[i] - 48;
			else
				temp = input[i] - 48;
			new_term.set_coefficient(temp);
		}

		else if (input[i] == '^') 
		{
			if (input[i + 1] == '-')
				new_term.set_exponent(-input[i + 2]+48);
		}

		else if (co_eff == false)
		{
			if (temp != 0)
				temp = temp * 10 + input[i] - 48;
			else
				temp = input[i] - 48;
			new_term.set_exponent(temp);
		}
		else
			break;
	}
	polynomial.push_back(new_term);
}

list<Term> Display_list(list<Term> polynomial)
{
	list<Term> ordered_poly;
		list<Term>::iterator itr = polynomial.end();
		for (itr; itr != polynomial.begin(); itr--)
			ordered_poly.push_back(*itr);
		return ordered_poly;
}

int main()
{
	list<Term> polynomial;
	list<Term> new_polynomial;

	string input;

	cin >> input;

	Convert_Input(input, polynomial);
	bool done = true;
	while (!done)
	{
		cout << "Second Polynomial?  (0 to exit)";
		cin >> input;
		if (input == "0")
			break;
		
		Convert_Input(input, new_polynomial);
		list<Term>::iterator original_itr = polynomial.begin();
		list<Term>::iterator new_itr = new_polynomial.begin();
		
		for (original_itr; original_itr != polynomial.end(); original_itr++)
		{
			for (new_itr; new_itr != new_polynomial.end(); new_itr++)
			{
				if (*original_itr == *new_itr)
				{
					*new_itr = *original_itr + *new_itr;
				}
				else if (*original_itr < *new_itr)
				{
					new_polynomial.insert(new_itr, *original_itr);
				}
				else if (new_itr == new_polynomial.end())
					new_polynomial.push_back(*original_itr);
			}
		}
		
		polynomial = new_polynomial;
		new_itr = new_polynomial.begin();
		new_polynomial.erase(new_itr);

	}

	system("pause");

	
}
